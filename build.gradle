// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {
        kotlin_version = '1.3.20'
        appId = 'it.golovchenko'
        binarySufix = "binwatch"
        ternarySufix = "terwatch"

        appNameTernary = 'BinWatch'
        appNameBinary = 'TernaryWatch'
        releasePath = '/dev/shm/'
        versionMajor = 0
        versionMinor = 1
        versionPatch = 7
        versionClassifier = null
        isSnapshot = false
        wearMinimumSdkVersion = 21
        mobileMinimumSdkVersion = 19
    }

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

Integer generateVersionCode(Integer wear = 0) {
    return 10000000 * (wear == 0 ? mobileMinimumSdkVersion : wearMinimumSdkVersion) + versionMajor * 10000 + versionMinor * 100 + versionPatch + wear
}

String generateVersionName(Integer wear = 0) {
    String versionName = "${versionMajor}.${versionMinor}.${versionPatch + wear}"
    if (versionClassifier == null && isSnapshot) {
        versionClassifier = "SNAPSHOT"
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + versionClassifier
    }
    println "### code ${generateVersionCode(wear)} "
    println "### name $versionName "
    return versionName
}

allprojects {
    repositories {
        google()
        jcenter()
    }

}



task clean(type: Delete) {
    delete rootProject.buildDir
}


subprojects {

    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                defaultConfig {
                    applicationId "$appId"
                }
                signingConfigs {
                    release {
                        storeFile file(RELEASE_STORE_FILE)
                        storePassword RELEASE_STORE_PASSWORD
                        keyAlias RELEASE_KEY_ALIAS
                        keyPassword RELEASE_KEY_PASSWORD
                    }
                }
                buildTypes {
                    release {
                        manifestPlaceholders = [appName: appNameBinary]
                        signingConfig signingConfigs.release
                        applicationIdSuffix = binarySufix
                    }
                    releaseTernary {
                        manifestPlaceholders = [appName: appNameTernary]
                        applicationIdSuffix = ternarySufix
                        signingConfig signingConfigs.release
                    }
                    debug {
//                        manifestPlaceholders = [appName: appNameTernary]
//                        applicationIdSuffix = ternarySufix
                        manifestPlaceholders = [appName: appNameBinary]
                        applicationIdSuffix = binarySufix
                    }
                } // buildTypes
            } // android
            def targetPath = file(releasePath)

            task verifyTargetPath {
                doLast {
                    if (!targetPath.exists()) {
                        throw new GradleException("Target path not valid!")
                    }
                }
            }
            task buildReleaseApk(dependsOn: ['verifyTargetPath', 'assembleRelease'], group: "a_create_release") {
                doLast {
                    ext.apkName = "release_${project.name}_-_${generateVersionName()}.apk"
                    ext.apk = file("${project.name}/build/outputs/apk/release/${project.name}-release.apk")
                    print ext.apk
                    print "\n"

                    if (ext.apk.exists()) {
                        copy {
                            from ext.apk.absolutePath
                            into targetPath
                            rename { ext.apkName }
                        }
                    }
                }
            }
            task buildReleaseTernaryApk(dependsOn: ['verifyTargetPath', 'assembleReleaseTernary'], group: "a_create_release") {
                doLast {
                    ext.apkName = "releaseTernary_${project.name}_-_${generateVersionName()}.apk"
                    ext.apk = file("${project.name}/build/outputs/apk/releaseTernary/${project.name}-releaseTernary.apk")
                    print ext.apk
                    print "\n"

                    if (ext.apk.exists()) {
                        copy {
                            from ext.apk.absolutePath
                            into targetPath
                            rename { ext.apkName }
                        }
                    }
                }
            }
        }
    } // afterEvaluate
}








